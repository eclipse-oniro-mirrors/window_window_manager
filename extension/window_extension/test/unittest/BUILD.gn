# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../windowmanager_aafwk.gni")
module_out_path = "window_manager/extension/window_extension"

group("unittest") {
  testonly = true

  deps = [
    ":extension_window_extension_context_test",
    ":extension_window_extension_proxy_test",
    ":extension_window_extension_stub_impl_test",
  ]
}

ohos_unittest("extension_window_extension_proxy_test") {
  module_out_path = module_out_path

  sources = [
    "${window_base_path}/window_scene/test/mock/mock_message_parcel.cpp",
    "window_extension_proxy_test.cpp",
  ]

  include_dirs = [ "${window_base_path}/window_scene/test/mock" ]

  deps = [ ":window_extension_unittest_common" ]
}

ohos_unittest("extension_window_extension_stub_impl_test") {
  module_out_path = module_out_path

  sources = [ "window_extension_stub_impl_test.cpp" ]

  include_dirs = [ "${window_base_path}/test/common/mock" ]

  deps = [ ":window_extension_unittest_common" ]
}

ohos_unittest("extension_window_extension_context_test") {
  module_out_path = module_out_path

  sources = [ "window_extension_context_test.cpp" ]

  deps = [ ":window_extension_unittest_common" ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:ability_start_options",
    "ability_runtime:app_context",
    "ability_runtime:extensionkit_native",
    "ability_runtime:napi_common",
    "ability_runtime:runtime",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
  ]
}

## Build window_extension_unittest_common.a {{{
config("window_extension_unittest_common_public_config") {
  include_dirs = [
    "../../include",
    "../../include/zidl",
    "../../../extension_connection/include",
    "../../../extension_connection/include/zidl",
    "../../../../interfaces/innerkits/extension",
  
    "${window_base_path}/test/common/mock",
    "${window_base_path}/dm/include",
    "${window_base_path}/dmserver/include",
    "${window_base_path}/wm/include",
    "${window_base_path}/wm/include/zidl",
    "${window_base_path}/wm/test/mock",
    "${window_base_path}/wmserver/include",
    "${window_base_path}/wmserver/include/window_snapshot",
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/utils/include",
    "${window_base_path}/window_scene",
    "${window_base_path}/window_scene/test/mock",
    "${window_base_path}/window_scene/session/host/include/zidl",
    "//third_party/googletest/googlemock/include",

    # for abilityContext
    "${ability_runtime_path}/interfaces/kits/native/ability/ability_runtime",
    "${ability_runtime_path}/interfaces/kits/native/appkit/ability_runtime/context",
    "//third_party/node/deps/icu-small/source/common",
    "${ability_runtime_inner_api_path}/ability_manager/include",
    "//foundation/ability/ability_base/interfaces/kits/native/configuration/include/",

    # abilityContext end
    "${accessibility_path}/interfaces/innerkits/common/include/",
  ]
}

ohos_static_library("window_extension_unittest_common") {
  visibility = [ ":*" ]
  testonly = true

  public_configs = [
    ":window_extension_unittest_common_public_config",
    "../../../../resources/config/build:coverage_flags",
    "../../../../resources/config/build:testcase_flags",
  ]

  public_deps = [
    # need delete it for abilitycontext
    "${ability_runtime_inner_api_path}/ability_manager:ability_manager",
    "${arkui_path}/ace_engine/interfaces/inner_api/ace:ace_uicontent",
    "${arkui_path}/napi:ace_napi",
    "${window_base_path}/dm:libdm",
    "${window_base_path}/dmserver:libdms",
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/utils:libwmutil_base",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/session:scene_session",
    "${window_base_path}/window_scene/session_manager:scene_session_manager",
    "${window_base_path}/wm:libwm",
    "${window_base_path}/wm:libwm_lite",
    "${window_base_path}/wmserver:libwms",
    "//commonlibrary/c_utils/base:utils",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  deps = [
    "../..:libwindow_extension",
    "../../../../interfaces/kits/napi/window_runtime:window_native_kit",
    "../../../../window_scene/session:scene_session",
    "../../../../wm:libwm",
    "../../../extension_connection:libwindow_extension_client",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "accessibility:accessibility_common",
    "c_utils:utils",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
  ]

  subsystem_name = "window"
  part_name = "window_manager"
}
