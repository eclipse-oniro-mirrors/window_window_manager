# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../windowmanager_aafwk.gni")

config("libwms_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "include/utils",
    "include/window_snapshot",
    "include/window_group",
    "../interfaces/innerkits/wm",
    "../interfaces/innerkits/dm",
    "../wm/include",
    "../utils/include",
    "../dm/include",
    "../dmserver/include",
  ]
}

config("libmockwms_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "${window_base_path}/utils/include",
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/window_scene/session_manager_service/include",
    "${window_base_path}/window_scene/session_manager/include/zidl",

    # for session_manager
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/interfaces/include",
    "${window_base_path}/window_scene",
    "${window_base_path}/window_scene/interfaces/include",
    "${window_base_path}/window_scene/session_manager/include",
    "${window_base_path}/window_scene/session_manager/include/zidl",
    "${window_base_path}/window_scene/session_manager_service/include",

    # for session_manager
    "${window_base_path}/wmserver/include",
    "${window_base_path}/wmserver/include/zidl",

    # for screen_session_manager
    "${window_base_path}/utils/include",
    "${window_base_path}/dm/include",
    "${window_base_path}/interfaces/innerkits/dm",
    "${window_base_path}/dmserver/include",
    "${window_base_path}/window_scene/screen_session_manager/include",

    # for scene session manager
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/wmserver/include",

    # for window_manager_hilog
    "${window_base_path}/utils/include",

    "${window_base_path}/wm/include",
    "${window_base_path}/wm/include/zidl",
  ]
}

ohos_shared_library("sms") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  sources = [
    "${window_base_path}/window_scene/session_manager/src/screen_session_manager_lite.cpp",
    "${window_base_path}/window_scene/session_manager/src/zidl/scene_session_manager_proxy.cpp",
    "${window_base_path}/window_scene/session_manager/src/zidl/screen_session_manager_lite_stub.cpp",
    "src/mock_session_manager_service.cpp",
    "src/zidl/mock_session_manager_service_stub.cpp",
    "src/zidl/session_manager_service_recover_proxy.cpp",
  ]

  public_configs = [ ":libmockwms_config" ]

  deps = [
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/utils:libwmutil_base",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    "../utils:libwmutil",
  ]
  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_runtime:mission_info",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  public_external_deps = [
    "ability_runtime:ability_manager",
    "accessibility:accessibility_common",
    "graphic_2d:window_animation",
    "input:libmmi-client",
    "input:libmmi-napi",
  ]
  if (scene_board_enabled) {
    deps += [ "${window_base_path}/window_scene/session_manager_service:session_manager_service" ]
  }
  if (is_standard_system) {
    external_deps += [ "init:libbegetutil" ]
  } else {
    external_deps += [ "init_lite:libbegetutil" ]
  }
  innerapi_tags = [ "platformsdk" ]
  part_name = "window_manager"
  subsystem_name = "window"
}

if (scene_board_enabled) {
  group("libwms") {
    deps = [ "../etc:wms_etc" ]
  }
} else {
  ohos_shared_library("libwms") {
    branch_protector_ret = "pac_ret"
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      cfi_vcall_icall_only = true
      debug = false
    }
    defines = []
    if (use_musl) {
      if (musl_use_jemalloc && musl_use_jemalloc_dfx_intf) {
        defines += [ "CONFIG_USE_JEMALLOC_DFX_INTF" ]
      }
    }
    sources = [
      "../wm/src/zidl/window_manager_agent_proxy.cpp",
      "../wm/src/zidl/window_proxy.cpp",
      "src/accessibility_connection.cpp",
      "src/avoid_area_controller.cpp",
      "src/display_group_controller.cpp",
      "src/display_group_info.cpp",
      "src/display_zoom_controller.cpp",
      "src/drag_controller.cpp",
      "src/freeze_controller.cpp",
      "src/inner_window.cpp",
      "src/input_window_monitor.cpp",
      "src/memory_guard.cpp",
      "src/minimize_app.cpp",
      "src/remote_animation.cpp",
      "src/starting_window.cpp",
      "src/utils/window_manager_service_utils.cpp",
      "src/window_common_event.cpp",
      "src/window_controller.cpp",
      "src/window_dumper.cpp",
      "src/window_group_mgr.cpp",
      "src/window_inner_manager.cpp",
      "src/window_layout_policy.cpp",
      "src/window_layout_policy_cascade.cpp",
      "src/window_layout_policy_tile.cpp",
      "src/window_manager_agent_controller.cpp",
      "src/window_manager_config.cpp",
      "src/window_manager_service.cpp",
      "src/window_node.cpp",
      "src/window_node_container.cpp",
      "src/window_node_state_machine.cpp",
      "src/window_pair.cpp",
      "src/window_root.cpp",
      "src/window_snapshot/snapshot_controller.cpp",
      "src/window_snapshot/snapshot_proxy.cpp",
      "src/window_snapshot/snapshot_stub.cpp",
      "src/window_system_effect.cpp",
      "src/window_zorder_policy.cpp",
      "src/zidl/window_manager_stub.cpp",
    ]

    configs = [
      ":libwms_config",
      "../resources/config/build:coverage_flags",
    ]

    deps = [
      "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
      "../dmserver:libdms",
      "../etc:wms_etc",
      "../utils:libwmutil",
      "../utils:libwmutil_base",
      "../wm:libwm",
    ]

    external_deps = [
      "ability_base:want",
      "ability_runtime:ability_manager",
      "c_utils:utils",
      "common_event_service:cesfwk_innerkits",
      "config_policy:configpolicy_util",
      "eventhandler:libeventhandler",
      "graphic_2d:librender_service_client",
      "graphic_2d:window_animation",
      "hicollie:libhicollie",
      "hilog:libhilog",
      "hisysevent:libhisysevent",
      "hitrace:hitrace_meter",
      "image_framework:image_native",
      "input:libmmi-client",
      "ipc:ipc_single",
      "libxml2:libxml2",
      "safwk:system_ability_fwk",
    ]

    if (defined(global_parts_info) &&
        defined(global_parts_info.resourceschedule_memmgr_override)) {
      external_deps += [ "memmgr:memmgrclient" ]
      defines += [ "MEMMGR_WINDOW_ENABLE" ]
    }

    if (defined(global_parts_info) &&
        defined(global_parts_info.resourceschedule_memmgr)) {
      external_deps += [ "memmgr:memmgrclient" ]
      defines += [ "MEMMGR_WINDOW_ENABLE" ]
    }

    if (defined(global_parts_info) &&
        defined(global_parts_info.resourceschedule_resource_schedule_service)) {
      external_deps += [ "resource_schedule_service:ressched_client" ]
      defines += [ "RESOURCE_SCHEDULE_SERVICE_ENABLE" ]
    }

    if (defined(global_parts_info) &&
        defined(global_parts_info.resourceschedule_soc_perf)) {
      external_deps += [ "soc_perf:socperf_client" ]
      defines += [ "SOC_PERF_ENABLE" ]
    }

    if (is_standard_system) {
      external_deps += [ "init:libbegetutil" ]
    } else {
      external_deps += [ "init_lite:libbegetutil" ]
    }

    if (defined(global_parts_info) &&
        defined(global_parts_info.powermgr_power_manager)) {
      external_deps += [ "power_manager:powermgr_client" ]
      defines += [ "POWER_MANAGER_ENABLE" ]
    }

    if (defined(global_parts_info) &&
        defined(global_parts_info.powermgr_display_manager)) {
      external_deps += [ "display_manager:displaymgr" ]
      defines += [ "POWERMGR_DISPLAY_MANAGER_ENABLE" ]
    }

    part_name = "window_manager"
    subsystem_name = "window"
  }
}

group("test") {
  testonly = true
  if (scene_board_enabled) {
    deps = []
  } else {
    deps = [ "test:test" ]
  }
}
