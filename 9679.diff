diff --git a/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_session.cpp b/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_session.cpp
index b7fdafcc04de9867eaa39f51c7ceb6445c514edb..11ab54d4aa65132ed950a48e754670da8ca20062 100644
--- a/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_session.cpp
+++ b/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_session.cpp
@@ -1013,12 +1013,12 @@ void JsSceneSession::ProcessPendingSessionToForegroundRegister()
 
 void JsSceneSession::ProcessPendingSessionToBackgroundForDelegatorRegister()
 {
-    TLOGD(WmsLogTag::WMS_LIFE, "begin");
+    TLOGD(WmsLogTag::WMS_LIFE, "in");
     NotifyPendingSessionToBackgroundForDelegatorFunc func = [weakThis = wptr(this)](const SessionInfo& info,
         bool shouldBackToCaller) {
         auto jsSceneSession = weakThis.promote();
         if (!jsSceneSession) {
-            TLOGE(WmsLogTag::WMS_LIFE, "jsSceneSession is null");
+            TLOGNE(WmsLogTag::WMS_LIFE, "jsSceneSession is null");
             return;
         }
         jsSceneSession->PendingSessionToBackgroundForDelegator(info, shouldBackToCaller);
diff --git a/window_scene/session/host/src/session.cpp b/window_scene/session/host/src/session.cpp
index f284b80bfb8b2be4257a381fa769e74c089566cf..13c465d76328259079e5f905aee958b004f7fc01 100644
--- a/window_scene/session/host/src/session.cpp
+++ b/window_scene/session/host/src/session.cpp
@@ -1527,7 +1527,7 @@ void Session::SetPendingSessionToBackgroundForDelegatorListener(
 
 WSError Session::PendingSessionToBackgroundForDelegator(bool shouldBackToCaller)
 {
-    TLOGD(WmsLogTag::WMS_LIFE, "id: %{public}d, shouldBackToCaller: %{public}d",
+    TLOGI(WmsLogTag::WMS_LIFE, "id: %{public}d, shouldBackToCaller: %{public}d",
         GetPersistentId(), shouldBackToCaller);
     SessionInfo info = GetSessionInfo();
     if (pendingSessionToBackgroundForDelegatorFunc_) {
diff --git a/window_scene/session_manager/include/scene_session_manager.h b/window_scene/session_manager/include/scene_session_manager.h
index c721e692e4784d4f6d1c3c91e0a9db7ed61b23eb..d5c21f42675f3ca61c212d1b341d30f6fa83d4e4 100644
--- a/window_scene/session_manager/include/scene_session_manager.h
+++ b/window_scene/session_manager/include/scene_session_manager.h
@@ -141,6 +141,7 @@ public:
     void NotifyForegroundInteractiveStatus(const sptr<SceneSession>& sceneSession, bool interactive);
     WSError RequestSceneSessionByCall(const sptr<SceneSession>& sceneSession);
     void StartAbilityBySpecified(const SessionInfo& sessionInfo);
+    void NotifyWindowStateErrorFromMMI(int32_t pid, int32_t persistentId);
 
     void SetRootSceneContext(const std::weak_ptr<AbilityRuntime::Context>& contextWeak);
     sptr<RootSceneSession> GetRootSceneSession();
diff --git a/window_scene/session_manager/src/scene_session_manager.cpp b/window_scene/session_manager/src/scene_session_manager.cpp
index a0f5f7364cd081bc16f1b3b5b7450c9a70fd44fb..101018a591d28f40388c39a328d505c2fd3e19d4 100644
--- a/window_scene/session_manager/src/scene_session_manager.cpp
+++ b/window_scene/session_manager/src/scene_session_manager.cpp
@@ -274,6 +274,13 @@ void SceneSessionManager::Init()
     RegisterAppListener();
     openDebugTrace = std::atoi((system::GetParameter("persist.sys.graphic.openDebugTrace", "0")).c_str()) != 0;
     isKeyboardPanelEnabled_ = system::GetParameter("persist.sceneboard.keyboardPanel.enabled", "1")  == "1";
+
+    // MMI window state error check
+    int32_t retCode = MMI::InputManager::GetInstance()->
+        RegisterWindowStateErrorCallback([this](int32_t pid, int32_t persistentId) {
+        this->NotifyWindowStateErrorFromMMI(pid, persistentId);
+    });
+    TLOGI(WmsLogTag::WMS_EVENT, "register WindowStateError callback with ret: %{public}d", retCode);
 }
 
 void SceneSessionManager::InitScheduleUtils()
@@ -6611,6 +6618,41 @@ void SceneSessionManager::StartAbilityBySpecified(const SessionInfo& sessionInfo
     taskScheduler_->PostAsyncTask(task, "StartAbilityBySpecified:PID:" + sessionInfo.bundleName_);
 }
 
+void SceneSessionManager::NotifyWindowStateErrorFromMMI(int32_t pid, int32_t persistentId)
+{
+    TLOGI(WmsLogTag::WMS_LIFE, "pid: %{public}d, persistentId: %{public}d", pid, persistentId);
+    if (pid == -1) {
+        TLOGE(WmsLogTag::WMS_LIFE, "invalid pid");
+        return;
+    }
+    int32_t ret = HiSysEventWrite(
+        HiviewDFX::HiSysEvent::Domain::WINDOW_MANAGER,
+        "WINDOW_STATE_ERROR",
+        HiviewDFX::HiSysEvent::EventType::FAULT,
+        "PID", pid,
+        "PERSISTENT_ID", persistentId);
+    if (ret != 0) {
+        TLOGE(WmsLogTag::WMS_LIFE, "write HiSysEvent error, ret: %{public}d", ret);
+    }
+    auto task = [this, pid] {
+        std::shared_lock<std::shared_mutex> lock(sceneSessionMapMutex_);
+        for (const auto& [_, sceneSession] : sceneSessionMap_) {
+            if (!sceneSession || pid != sceneSession->GetCallingPid() ||
+                !WindowHelper::IsMainWindow(sceneSession->GetWindowType())) {
+                continue;
+            }
+            auto abilitySessionInfo = SetAbilitySessionInfo(sceneSession);
+            if (abilitySessionInfo) {
+                TLOGI(WmsLogTag::WMS_LIFE, "terminate session, persistentId: %{public}d",
+                    abilitySessionInfo->persistentId);
+                sceneSession->TerminateSessionNew(abilitySessionInfo, false, false);
+            }
+        }
+    };
+    // delay 2000ms, wait for hidumper
+    taskScheduler_->PostAsyncTask(task, __func__, 2000);
+}
+
 sptr<SceneSession> SceneSessionManager::FindMainWindowWithToken(sptr<IRemoteObject> targetToken)
 {
     if (!targetToken) {
@@ -7518,12 +7560,12 @@ WSError SceneSessionManager::PendingSessionToForeground(const sptr<IRemoteObject
 WSError SceneSessionManager::PendingSessionToBackgroundForDelegator(const sptr<IRemoteObject>& token,
     bool shouldBackToCaller)
 {
-    auto task = [this, &token, shouldBackToCaller]() {
+    auto task = [this, &token, shouldBackToCaller] {
         auto session = FindSessionByToken(token);
         if (session != nullptr) {
             return session->PendingSessionToBackgroundForDelegator(shouldBackToCaller);
         }
-        TLOGE(WmsLogTag::WMS_LIFE, "fail to find token");
+        TLOGNE(WmsLogTag::WMS_LIFE, "fail to find token");
         return WSError::WS_ERROR_INVALID_PARAM;
     };
     return taskScheduler_->PostSyncTask(task, "PendingSessionToBackgroundForDelegator");
diff --git a/window_scene/session_manager/src/zidl/scene_session_manager_lite_stub.cpp b/window_scene/session_manager/src/zidl/scene_session_manager_lite_stub.cpp
index 1b963296589f9798a22401fbce84046357eb9c5d..5224911cddd4c9a9aa1d4cd7639db8fd661014da 100644
--- a/window_scene/session_manager/src/zidl/scene_session_manager_lite_stub.cpp
+++ b/window_scene/session_manager/src/zidl/scene_session_manager_lite_stub.cpp
@@ -167,7 +167,7 @@ int SceneSessionManagerLiteStub::HandlePendingSessionToBackgroundForDelegator(Me
     TLOGD(WmsLogTag::WMS_LIFE, "run");
     sptr<IRemoteObject> token = data.ReadRemoteObject();
     if (token == nullptr) {
-        WLOGFE("token is nullptr");
+        TLOGE(WmsLogTag::WMS_LIFE, "token is nullptr");
         return ERR_INVALID_DATA;
     }
     bool shouldBackToCaller = true;
@@ -175,7 +175,7 @@ int SceneSessionManagerLiteStub::HandlePendingSessionToBackgroundForDelegator(Me
         TLOGE(WmsLogTag::WMS_LIFE, "Read shouldBackToCaller failed");
         return ERR_INVALID_DATA;
     }
-    const WSError errCode = PendingSessionToBackgroundForDelegator(token, shouldBackToCaller);
+    WSError errCode = PendingSessionToBackgroundForDelegator(token, shouldBackToCaller);
     reply.WriteInt32(static_cast<int32_t>(errCode));
     return ERR_NONE;
 }
diff --git a/window_scene/session_manager/src/zidl/scene_session_manager_stub.cpp b/window_scene/session_manager/src/zidl/scene_session_manager_stub.cpp
index 3679bf655b1acea1a5f8f604016fb6764e906100..3717caeaf24ef7d2a91603f89d75e62137b06202 100644
--- a/window_scene/session_manager/src/zidl/scene_session_manager_stub.cpp
+++ b/window_scene/session_manager/src/zidl/scene_session_manager_stub.cpp
@@ -406,7 +406,7 @@ int SceneSessionManagerStub::HandlePendingSessionToBackgroundForDelegator(Messag
     TLOGD(WmsLogTag::WMS_LIFE, "run");
     sptr<IRemoteObject> token = data.ReadRemoteObject();
     if (token == nullptr) {
-        WLOGFE("token is nullptr");
+        TLOGE(WmsLogTag::WMS_LIFE, "token is nullptr");
         return ERR_INVALID_DATA;
     }
     bool shouldBackToCaller = true;
@@ -414,7 +414,7 @@ int SceneSessionManagerStub::HandlePendingSessionToBackgroundForDelegator(Messag
         TLOGE(WmsLogTag::WMS_LIFE, "Read shouldBackToCaller failed");
         return ERR_INVALID_DATA;
     }
-    const WSError& errCode = PendingSessionToBackgroundForDelegator(token, shouldBackToCaller);
+    WSError errCode = PendingSessionToBackgroundForDelegator(token, shouldBackToCaller);
     reply.WriteInt32(static_cast<int32_t>(errCode));
     return ERR_NONE;
 }
diff --git a/window_scene/test/unittest/scene_session_manager_lifecycle_test2.cpp b/window_scene/test/unittest/scene_session_manager_lifecycle_test2.cpp
index 6e69670a64b114441fb1f4ade61205f665d82200..b5039da7b17820c63fc614f094d955d6aa5802e0 100644
--- a/window_scene/test/unittest/scene_session_manager_lifecycle_test2.cpp
+++ b/window_scene/test/unittest/scene_session_manager_lifecycle_test2.cpp
@@ -206,6 +206,41 @@ HWTEST_F(SceneSessionManagerLifecycleTest2, OnSessionStateChange02, Function | S
     ASSERT_NE(nullptr, ssm_);
     ssm_->OnSessionStateChange(1, state);
 }
+
+/**
+ * @tc.name: NotifyWindowStateErrorFromMMI
+ * @tc.desc: NotifyWindowStateErrorFromMMI
+ * @tc.type: FUNC
+ */
+HWTEST_F(SceneSessionManagerLifecycleTest2, NotifyWindowStateErrorFromMMI, Function | SmallTest | Level3)
+{
+    int ret = 0;
+    ssm_->sceneSessionMap_.clear();
+    SessionInfo info;
+    info.abilityName_ = "SceneSessionManagerLifecycleTest2";
+    info.bundleName_ = "NotifyWindowStateErrorFromMMI";
+    info.screenId_ = 0;
+    sptr<SceneSession> sceneSession = sptr<SceneSession>::MakeSptr(info, nullptr);
+    ASSERT_NE(nullptr, sceneSession);
+    sptr<WindowSessionProperty> property = sptr<WindowSessionProperty>::MakeSptr();
+    ASSERT_NE(nullptr, property);
+    property->SetWindowType(WindowType::WINDOW_TYPE_APP_MAIN_WINDOW);
+    sceneSession->property_ = property;
+    sceneSession->SetCallingPid(100);
+
+    SessionInfo info1;
+    info1.abilityName_ = "SceneSessionManagerLifecycleTest2";
+    info1.bundleName_ = "NotifyWindowStateErrorFromMMI1";
+    info1.screenId_ = 0;
+    sptr<SceneSession> sceneSession1 = sptr<SceneSession>::MakeSptr(info1, nullptr);
+    ASSERT_NE(nullptr, sceneSession1);
+    sceneSession1->SetCallingPid(200);
+
+    ssm_->sceneSessionMap_.insert({10086, sceneSession});
+    ssm_->sceneSessionMap_.insert({10087, sceneSession1});
+    ssm_->NotifyWindowStateErrorFromMMI(100, 10086);
+    ASSERT_EQ(ret, 0);
+}
 }
 } // namespace Rosen
 } // namespace OHOS
diff --git a/window_scene/test/unittest/session_test2.cpp b/window_scene/test/unittest/session_test2.cpp
index 02bba5ff9c4ddc3c2538fc1a42733223bedc6143..7d57d2e9042154876b687efebbe97e328e5c14a1 100644
--- a/window_scene/test/unittest/session_test2.cpp
+++ b/window_scene/test/unittest/session_test2.cpp
@@ -1425,6 +1425,9 @@ HWTEST_F(WindowSessionTest2, SetRaiseToAppTopForPointDownFunc, Function | SmallT
     session_->SetNotifyUIRequestFocusFunc(nullptr);
     session_->SetNotifyUILostFocusFunc(nullptr);
     session_->UnregisterSessionChangeListeners();
+
+    NotifyPendingSessionToBackgroundForDelegatorFunc func2 = [](const SessionInfo& info, bool shouldBackToCaller) {};
+    session_->pendingSessionToBackgroundForDelegatorFunc_ = func2;
     ASSERT_EQ(WSError::WS_OK, session_->PendingSessionToBackgroundForDelegator(true));
 }
 
