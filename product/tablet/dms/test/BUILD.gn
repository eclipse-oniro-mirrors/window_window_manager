# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../windowmanager_aafwk.gni")

module_out_path = "window_manager/OH-DMS/product"

group("unittest") {
  testonly = true

  deps = [
    ":ws_screen_session_manager_tablet_extension_test",
    ":ws_screen_session_manager_tablet_register_test",
  ]
}

test_external_deps = [
  "ability_base:configuration",
  "ability_runtime:ability_manager",
  "ability_runtime:app_manager",
  "ability_runtime:session_handler",
  "access_token:libaccesstoken_sdk",
  "accessibility:accessibility_common",
  "accessibility:accessibility_interface",
  "c_utils:utils",
  "ffrt:libffrt",
  "googletest:gmock",
  "googletest:gtest",
  "googletest:gtest_main",
  "graphic_2d:librender_service_base",
  "graphic_2d:librender_service_client",
  "graphic_2d:window_animation",
  "hilog:libhilog",
  "image_framework:image_native",
  "input:libmmi-client",
  "input:libmmi-napi",
  "ipc:ipc_single",
  "libxml2:libxml2",
  "napi:ace_napi",
  "safwk:system_ability_fwk",
  "os_account:os_account_innerkits",
  "ability_base:session_info",
  "ability_base:want",
]

ohos_unittest("ws_screen_session_manager_tablet_extension_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_manager_tablet_extension_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [
    "ability_runtime:dataobs_manager",
    "init:libbegetutil"
  ]
}

ohos_unittest("ws_screen_session_manager_tablet_register_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_manager_tablet_register_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [
    "ability_runtime:dataobs_manager",
    "init:libbegetutil"
  ]
}

## Build ws_unittest_common.a {{{
config("ws_unittest_common_public_config") {
  include_dirs = [
    "${window_base_path}/dmserver/include",
    "${window_base_path}/dm/include",
    "${window_base_path}/test/common/utils/include",
    "${window_base_path}/utils/include",
    "${dmserver_gen_path}",
    "${window_base_path}/wmserver/include",
    "${window_base_path}/wmserver/include/zidl",
    "${window_base_path}/wm/include",
    "${window_base_path}/wm/include/zidl",

    "${window_base_path}/product/tablet/dms/include",
    "${window_base_path}/product/pc/dms/include",
    "${window_base_path}/product/phone/dms/include",

    "${window_base_path}/window_scene/session/screen/include",
    "${window_base_path}/window_scene",
    "${window_base_path}/window_scene/common/include",
    "${window_base_path}/window_scene/screen_session_manager/include",
    "${window_base_path}/window_scene/screen_session_manager_client/include",
    "${window_base_path}/window_scene/interfaces/include",
    "${window_base_path}/window_scene/interfaces/innerkits/include",
    "${window_base_path}/test/common/mock",

    "${window_base_path}/interfaces/innerkits/dm",
    "${window_base_path}/innerkits/wm",
    "${window_base_path}/test/common/mock",
    "${window_base_path}/test/common/utils/include",
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/window_scene/session_manager/include",
    "${window_base_path}/window_scene/session_manager_service/include",
    "${window_base_path}/window_scene/test",
    "${window_base_path}/window_scene/intention_event/service/event_stage/include",
    "${window_base_path}/window_scene/session/container/include/zidl",
    "${window_base_path}/window_scene/test/mock",
    "${window_base_path}/window_scene/test/dms_unittest",
  ]
}

ohos_static_library("ws_unittest_common") {
  visibility = [ ":*" ]
  testonly = true

  deps = [
    "${window_base_path}/dm:libdm",
    "${window_base_path}/wm:libwm",
    "${window_base_path}/test/common/utils:libtestutil",
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/utils:libwmutil_base",

    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/intention_event/service:intention_event_anr_manager",
    "${window_base_path}/window_scene/screen_session_manager:screen_session_manager",
    "${window_base_path}/window_scene/screen_session_manager_client:screen_session_manager_client",
    "${window_base_path}/window_scene/session:scene_session",
    "${window_base_path}/window_scene/session:screen_session",
    "${window_base_path}/window_scene/session_manager:scene_session_manager",
    "${window_base_path}/window_scene/session_manager:session_manager",
    "${window_base_path}/window_scene/session_manager:session_manager_lite",

    "${window_base_path}/product:libdms_ext",
  ]

  public_configs = [
    ":ws_unittest_common_public_config",
    "${window_base_path}/resources/config/build:coverage_flags",
    "${window_base_path}/resources/config/build:testcase_flags",
    "${window_base_path}/wmserver:libidl_config",
  ]

  external_deps = test_external_deps

  defines = []
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "SENSOR_ENABLE" ]
  }

  subsystem_name = "window"
  part_name = "window_manager"
}

## Build ws_unittest_common.a }}}