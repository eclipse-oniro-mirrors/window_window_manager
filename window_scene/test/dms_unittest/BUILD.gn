# Copyright (c) 2023-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../windowmanager_aafwk.gni")
module_out_path = "window_manager/OH-DMS/window_scene"

group("unittest") {
  testonly = true

  deps = [
    ":ws_screen_cutout_controller_test",
    ":ws_screen_edid_test",
    ":ws_screen_power_utils_test",
    ":ws_screen_property_test",
    ":ws_screen_rotation_property_test",
    ":ws_screen_scene_config_test",
    ":ws_screen_session_manager_client_proxy_test",
    ":ws_screen_session_manager_client_stub_test",
    ":ws_screen_session_manager_lite_proxy_test",
    ":ws_screen_session_manager_lite_stub_test",
    ":ws_screen_session_manager_lite_test",
    ":ws_screen_session_manager_stub_test",
    ":ws_screen_session_publish_test",
    ":ws_screen_session_test",
    ":ws_screen_setting_helper_test",
    ":ws_screen_snapshot_picker_connection_test",
    ":ws_session_display_power_controller_test",
    ":ws_screen_state_machine_test",
    ":ws_setting_observer_test",
    ":ws_setting_provider_test",
  ]

  if (!window_manager_use_sceneboard) {
    deps += [ ":ws_screen_session_manager_proxy_ut_test" ]
  } else {
    deps += [
      ":ws_screen_session_manager_proxy_test",
      ":ws_screen_session_manager_client_test",
      ":ws_screen_session_manager_test",
      ":ws_screen_session_manager_test2",
    ]
  }

  if (!window_manager_use_sceneboard) {
    deps += [ ":ws_screen_session_ability_connection_ut_test" ]
  } else {
    deps += [ ":ws_screen_session_ability_connection_test" ]
  }

  if (window_manager_fold_ability) {
    deps += [
      ":ws_dual_display_fold_policy_test",
      ":ws_dual_display_sensor_fold_state_manager_test",
      ":ws_fold_screen_controller_test",
      ":ws_fold_screen_sensor_manager_test",
      ":ws_fold_screen_state_machine_test",
      ":ws_secondary_display_fold_policy_test",
      ":ws_secondary_display_sensor_fold_state_manager_test",
      ":ws_secondary_fold_sensor_manager_test",
      ":ws_sensor_fold_state_manager_test",
      ":ws_single_display_fold_policy_test",
      ":ws_single_display_pocket_fold_policy_test",
      ":ws_single_display_sensor_fold_state_manager_test",
      ":ws_single_display_sensor_pocket_fold_state_manager_test",
      ":ws_super_fold_sensor_manager_test",
      ":ws_super_fold_state_manager_test",
    ]
  }

  if (window_manager_feature_multi_screen) {
    deps += [
      ":ws_multi_screen_change_utils_test",
      ":ws_multi_screen_manager_test",
      ":ws_multi_screen_mode_change_manager_test",
      ":ws_multi_screen_power_change_manager_test",
    ]
  }
}

test_external_deps = [
  "ability_base:configuration",
  "ability_runtime:ability_manager",
  "ability_runtime:app_manager",
  "ability_runtime:session_handler",
  "accessibility:accessibility_common",
  "accessibility:accessibility_interface",
  "access_token:libaccesstoken_sdk",
  "cJSON:cjson_static",
  "c_utils:utils",
  "ffrt:libffrt",
  "googletest:gmock",
  "googletest:gtest",
  "googletest:gtest_main",
  "graphic_2d:librender_service_base",
  "graphic_2d:librender_service_client",
  "graphic_2d:window_animation",
  "hilog:libhilog",
  "image_framework:image_native",
  "input:libmmi-client",
  "input:libmmi-napi",
  "ipc:ipc_single",
  "libxml2:libxml2",
  "napi:ace_napi",
  "safwk:system_ability_fwk",
  "selinux_adapter:librestorecon",
]

ohos_unittest("ws_setting_observer_test") {
  module_out_path = module_out_path

  sources = [ "setting_observer_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [ "ability_runtime:dataobs_manager" ]
}

ohos_unittest("ws_setting_provider_test") {
  module_out_path = module_out_path

  sources = [ "setting_provider_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [ "data_share:datashare_consumer" ]
}

ohos_unittest("ws_screen_session_publish_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_publish_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [
    "common_event_service:cesfwk_innerkits",
    "init:libbegetutil",
  ]
}

ohos_unittest("ws_screen_setting_helper_test") {
  module_out_path = module_out_path

  sources = [ "screen_setting_helper_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
  ]
  external_deps = test_external_deps
  external_deps += [
    "ability_runtime:dataobs_manager",
    "init:libbegetutil",
  ]
}

ohos_unittest("ws_screen_session_manager_lite_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_manager_lite_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/dm_lite:libdm_lite",
    "${window_base_path}/wmserver:sms",
  ]

  external_deps = test_external_deps
}

ohos_unittest("ws_multi_screen_change_utils_test") {
  module_out_path = module_out_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "multi_screen_change_utils_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [ "hitrace:hitrace_meter" ]
}

ohos_unittest("ws_multi_screen_manager_test") {
  module_out_path = module_out_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "multi_screen_manager_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [ "hitrace:hitrace_meter" ]
}

ohos_unittest("ws_multi_screen_mode_change_manager_test") {
  module_out_path = module_out_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "multi_screen_mode_change_manager_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
}

ohos_unittest("ws_multi_screen_power_change_manager_test") {
  module_out_path = module_out_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "multi_screen_power_change_manager_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
}

ohos_unittest("ws_screen_session_test") {
  module_out_path = module_out_path

  include_dirs = [ "${window_base_path}/window_scene/session/screen/include" ]
  sources = [ "screen_session_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    "${window_base_path}/window_scene/session:screen_session",
  ]

  external_deps = test_external_deps
  external_deps += [ "init:libbegetutil" ]

  defines = []

  if (window_manager_fold_ability) {
    defines += [ "FOLD_ABILITY_ENABLE" ]
  }

  if (window_manager_feature_screen_active_mode) {
    defines += [ "WM_SCREEN_ACTIVE_MODE_ENABLE" ]
  }

  if (window_manager_feature_screen_color_gamut) {
    defines += [ "WM_SCREEN_COLOR_GAMUT_ENABLE" ]
  }

  if (window_manager_feature_screen_hdr_format) {
    defines += [ "WM_SCREEN_HDR_FORMAT_ENABLE" ]
  }

  if (window_manager_feature_screen_color_space) {
    defines += [ "WM_SCREEN_COLOR_SPACE_ENABLE" ]
  }

  if (window_manager_feature_multi_screen) {
    defines += [ "WM_MULTI_SCREEN_ENABLE" ]
  }

  if (window_manager_feature_multi_screen_frame_ctl) {
    defines += [ "WM_MULTI_SCREEN_CTL_ABILITY_ENABLE" ]
  }
  if (window_manager_feature_cam_mode) {
    defines += [ "WM_CAM_MODE_ABILITY_ENABLE" ]
  }

  if (window_manager_feature_multi_usr) {
    defines += [ "WM_MULTI_USR_ABILITY_ENABLE" ]
  }
}

ohos_unittest("ws_screen_session_ability_connection_test") {
  module_out_path = module_out_path

  include_dirs = [ "${window_base_path}/window_scene/session/screen/include" ]
  sources = [ "screen_session_ability_connection_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    "${window_base_path}/window_scene/session:screen_session",
  ]

  external_deps = test_external_deps
  external_deps += [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:abilitykit_native",
    "ability_runtime:extension_manager",
    "ipc:ipc_core",
  ]
}

ohos_unittest("ws_screen_session_ability_connection_ut_test") {
  module_out_path = module_out_path

  include_dirs = [ "${window_base_path}/window_scene/session/screen/include" ]
  sources = [ "screen_session_ability_connection_ut_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    "${window_base_path}/window_scene/session:screen_session",
  ]

  external_deps = test_external_deps
  external_deps += [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:abilitykit_native",
    "ability_runtime:extension_manager",
    "ipc:ipc_core",
  ]
}

ohos_unittest("ws_screen_snapshot_picker_connection_test") {
  module_out_path = module_out_path

  include_dirs = [ "${window_base_path}/window_scene/session/screen/include" ]
  sources = [ "screen_snapshot_picker_connection_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/session:screen_session",
  ]

  external_deps = test_external_deps
  external_deps += [ "ability_runtime:abilitykit_native" ]
}

ohos_unittest("ws_screen_property_test") {
  module_out_path = module_out_path

  include_dirs = [ "${window_base_path}/window_scene/session/screen/include" ]
  sources = [ "screen_property_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/session:screen_session",
  ]

  external_deps = test_external_deps
}

ohos_unittest("ws_screen_cutout_controller_test") {
  module_out_path = module_out_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "screen_cutout_controller_test.cpp" ]

  deps = [ ":ws_unittest_common" ]
  external_deps = test_external_deps
}

ohos_unittest("ws_screen_scene_config_test") {
  module_out_path = module_out_path

  sources = [ "screen_scene_config_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
  ]

  external_deps = test_external_deps
  external_deps += [ "init:libbegetutil" ]
}

ohos_unittest("ws_screen_session_manager_client_proxy_test") {
  module_out_path = module_out_path

  sources = [
    "../mock/mock_message_parcel.cpp",
    "screen_session_manager_client_proxy_test.cpp"
  ]

  include_dirs = [ "../mock" ]

  deps = [ ":ws_unittest_common" ]
  external_deps = test_external_deps
}

ohos_unittest("ws_screen_session_manager_client_stub_test") {
  module_out_path = module_out_path

  include_dirs = [ "${window_base_path}/window_scene/screen_session_manager_client/include/zidl" ]

  sources = [ "screen_session_manager_client_stub_test.cpp" ]

  deps = [ ":ws_unittest_common" ]
  external_deps = test_external_deps
}

ohos_unittest("ws_screen_session_manager_client_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_manager_client_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
  ]

  external_deps = test_external_deps
  external_deps += [ "init:libbegetutil" ]
}

ohos_unittest("ws_screen_session_manager_lite_proxy_test") {
  module_out_path = module_out_path

  sources = [
    "${window_base_path}/window_scene/screen_session_manager/src/zidl/screen_session_manager_lite_proxy.cpp",
    "screen_session_manager_lite_proxy_test.cpp",
  ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/dm_lite:libdm_lite",
    "${window_base_path}/wmserver:sms",
  ]
  external_deps = test_external_deps
}

ohos_unittest("ws_screen_session_manager_lite_stub_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_manager_lite_stub_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/wmserver:sms",
  ]
  external_deps = test_external_deps
}

ohos_unittest("ws_screen_session_manager_stub_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_manager_stub_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
  ]

  external_deps = test_external_deps
}

ohos_unittest("ws_screen_session_manager_proxy_test") {
  module_out_path = module_out_path

  sources = [
    "../mock/mock_message_parcel.cpp",
    "screen_session_manager_proxy_test.cpp",
  ]

  include_dirs = [ "../mock" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
  ]

  external_deps = test_external_deps
  external_deps += [ "init:libbegetutil" ]
}

ohos_unittest("ws_screen_session_manager_proxy_ut_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_manager_proxy_ut_test.cpp" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
  ]

  external_deps = test_external_deps
}

ohos_unittest("ws_screen_session_manager_test") {
  module_out_path = module_out_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "${window_base_path}/window_scene/test/mock/mock_accesstoken_kit.cpp",
    "screen_session_manager_test.cpp"
  ]

  include_dirs = [ "../mock" ]

  deps = [
    ":ws_unittest_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
  ]

  external_deps = test_external_deps
  external_deps += [
    "ability_runtime:ability_context_native",
    "ability_runtime:runtime",
    "init:libbegetutil",
  ]

  defines = []

  if (window_manager_fold_ability) {
    defines += [ "FOLD_ABILITY_ENABLE" ]
  }

  if (window_manager_feature_screen_active_mode) {
    defines += [ "WM_SCREEN_ACTIVE_MODE_ENABLE" ]
  }

  if (window_manager_feature_screen_color_gamut) {
    defines += [ "WM_SCREEN_COLOR_GAMUT_ENABLE" ]
  }

  if (window_manager_feature_screen_hdr_format) {
    defines += [ "WM_SCREEN_HDR_FORMAT_ENABLE" ]
  }

  if (window_manager_feature_screen_color_space) {
    defines += [ "WM_SCREEN_COLOR_SPACE_ENABLE" ]
  }

  if (window_manager_feature_multi_screen) {
    defines += [ "WM_MULTI_SCREEN_ENABLE" ]
  }

  if (window_manager_feature_multi_screen_frame_ctl) {
    defines += [ "WM_MULTI_SCREEN_CTL_ABILITY_ENABLE" ]
  }
  if (window_manager_feature_cam_mode) {
    defines += [ "WM_CAM_MODE_ABILITY_ENABLE" ]
  }

  if (window_manager_feature_multi_usr) {
    defines += [ "WM_MULTI_USR_ABILITY_ENABLE" ]
  }
}

ohos_unittest("ws_screen_session_manager_test2") {
  module_out_path = module_out_path

  sources = [ 
    "${window_base_path}/window_scene/test/mock/mock_accesstoken_kit.cpp",
    "screen_session_manager_test2.cpp" 
  ]


  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [
    "ability_runtime:dataobs_manager",
    "init:libbegetutil"
  ]
}

ohos_unittest("ws_screen_rotation_property_test") {
  module_out_path = module_out_path

  sources = [ "screen_rotation_property_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps

  defines = []
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "SENSOR_ENABLE" ]
  }
}

ohos_unittest("ws_screen_session_dumper_test") {
  module_out_path = module_out_path

  sources = [ "screen_session_dumper_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  defines = []

  if (window_manager_fold_ability) {
    defines += [ "FOLD_ABILITY_ENABLE" ]
  }

  external_deps = test_external_deps
  external_deps += [ "init:libbegetutil" ]
}

ohos_unittest("ws_screen_power_utils_test") {
  module_out_path = module_out_path

  sources = [ "screen_power_utils_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [ "init:libbegetutil" ]
}

ohos_unittest("ws_screen_edid_test") {
  module_out_path = module_out_path

  sources = [ "screen_edid_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
  external_deps += [ "init:libbegetutil" ]
}

ohos_unittest("ws_session_display_power_controller_test") {
  module_out_path = module_out_path

  sources = [ "session_display_power_controller_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
}

ohos_unittest("ws_screen_state_machine_test") {
  module_out_path = module_out_path

  sources = [ "screen_state_machine_test.cpp" ]

  deps = [ ":ws_unittest_common" ]

  external_deps = test_external_deps
}

if (window_manager_fold_ability) {
  ohos_unittest("ws_single_display_fold_policy_test") {
    module_out_path = module_out_path

    sources = [ "single_display_fold_policy_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
  }

  ohos_unittest("ws_single_display_pocket_fold_policy_test") {
    module_out_path = module_out_path

    sources = [ "single_display_pocket_fold_policy_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
    external_deps += [
      "hisysevent:libhisysevent",
      "init:libbegetutil",
    ]
  }

  ohos_unittest("ws_sensor_fold_state_manager_test") {
    module_out_path = module_out_path

    sources = [ "sensor_fold_state_manager_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
    external_deps += [ "init:libbegetutil" ]
  }

  ohos_unittest("ws_dual_display_fold_policy_test") {
    module_out_path = module_out_path

    sources = [ "dual_display_fold_policy_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
    external_deps += [ "init:libbegetutil" ]
  }

  ohos_unittest("ws_dual_display_sensor_fold_state_manager_test") {
    module_out_path = module_out_path

    sources = [ "dual_display_sensor_fold_state_manager_test.cpp" ]

    deps = [
      ":ws_unittest_common",
      "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    ]

    external_deps = test_external_deps
    external_deps += [ "init:libbegetutil" ]

    defines = []
    if (defined(global_parts_info) &&
        defined(global_parts_info.sensors_sensor)) {
      external_deps += [ "sensor:sensor_interface_native" ]
      defines += [ "SENSOR_ENABLE" ]
    }
  }
  
  ohos_unittest("ws_fold_screen_sensor_manager_test") {
    module_out_path = module_out_path

    sources = [ "fold_screen_sensor_manager_test.cpp" ]

    deps = [
      ":ws_unittest_common",
      "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    ]

    external_deps = test_external_deps
    external_deps += [
      "hisysevent:libhisysevent",
      "init:libbegetutil",
    ]

    defines = []
    if (defined(global_parts_info) &&
        defined(global_parts_info.sensors_sensor)) {
      external_deps += [ "sensor:sensor_interface_native" ]
      defines += [ "SENSOR_ENABLE" ]
    }
  }

  ohos_unittest("ws_fold_screen_controller_test") {
    module_out_path = module_out_path

    sources = [ "fold_screen_controller_test.cpp" ]

    deps = [ 
      ":ws_unittest_common",
      "${window_base_path}/window_scene/interfaces/innerkits:libwsutils"
    ]

    external_deps = test_external_deps
    external_deps += [ "init:libbegetutil" ]
  }

  ohos_unittest("ws_fold_screen_state_machine_test") {
    module_out_path = module_out_path

    sources = [ "fold_screen_state_machine_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
  }

  ohos_unittest("ws_single_display_sensor_fold_state_manager_test") {
    module_out_path = module_out_path

    sources = [ "single_display_sensor_fold_state_manager_test.cpp" ]

    deps = [
      ":ws_unittest_common",
      "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    ]

    external_deps = test_external_deps
  }

  ohos_unittest("ws_single_display_sensor_pocket_fold_state_manager_test") {
    module_out_path = module_out_path

    sources = [ "single_display_sensor_pocket_fold_state_manager_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
    external_deps += [ "init:libbegetutil" ]
  }

  ohos_unittest("ws_super_fold_state_manager_test") {
    module_out_path = module_out_path

    sources = [ "super_fold_state_manager_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
  }

  ohos_unittest("ws_super_fold_sensor_manager_test") {
    module_out_path = module_out_path

    sources = [ "super_fold_sensor_manager_test.cpp" ]

    deps = [
      ":ws_unittest_common",
      "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    ]

    external_deps = test_external_deps
    external_deps += [
      "hisysevent:libhisysevent",
      "init:libbegetutil",
      "sensor:sensor_interface_native",
    ]
  }

  ohos_unittest("ws_secondary_display_sensor_fold_state_manager_test") {
    module_out_path = module_out_path

    sources = [ "secondary_display_sensor_fold_state_manager_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
    external_deps += [ "init:libbegetutil" ]
  }

  ohos_unittest("ws_secondary_fold_sensor_manager_test") {
    module_out_path = module_out_path

    sources = [ "secondary_fold_sensor_manager_test.cpp" ]

    deps = [
      ":ws_unittest_common",
      "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    ]

    external_deps = test_external_deps
    external_deps += [
      "init:libbegetutil",
      "sensor:sensor_interface_native",
    ]

    defines = []
    if (defined(global_parts_info) &&
        defined(global_parts_info.sensors_sensor)) {
      external_deps += [ "sensor:sensor_interface_native" ]
      defines += [ "SENSOR_ENABLE" ]
    }
  }

  ohos_unittest("ws_secondary_display_fold_policy_test") {
    module_out_path = module_out_path

    sources = [ "secondary_display_fold_policy_test.cpp" ]

    deps = [ ":ws_unittest_common" ]

    external_deps = test_external_deps
    external_deps += [ "init:libbegetutil" ]
  }
}

## Build ws_unittest_common.a {{{
config("ws_unittest_common_public_config") {
  include_dirs = [
    "${window_base_path}/test/common/mock",
    "${window_base_path}/test/common/utils/include",

    # for WMError Code
    "${window_base_path}/dm/include",
    "${window_base_path}/dmserver/include",
    "${window_base_path}/interfaces/innerkits/dm",
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/window_scene/screen_session_manager_client/include",
    "${window_base_path}/window_scene/screen_session_manager/include",
    "${window_base_path}/window_scene/session_manager/include",
    "${window_base_path}/window_scene/session_manager_service/include",
    "${window_base_path}/window_scene/common/include",
    "${window_base_path}/window_scene",
    "${window_base_path}/window_scene/test",
    "${window_base_path}/window_scene/intention_event/service/event_stage/include",

    # for window_manager_interface
    "${window_base_path}/wmserver/include",
    "${window_base_path}/wmserver/include/zidl",
    "${window_base_path}/wm/include",
    "${window_base_path}/wm/include/zidl",

    # for session
    "${window_base_path}/window_scene/session/container/include/zidl",

    # for session_manager
    "${window_base_path}/window_scene/interfaces/include",

    "${window_base_path}/wm/include",
    "${window_base_path}/wm/include/zidl",

    # for window_manager_hilog
    "${window_base_path}/utils/include",

    "${dmserver_gen_path}",
  ]
}

ohos_static_library("ws_unittest_common") {
  visibility = [ ":*" ]
  testonly = true

  public_configs = [
    ":ws_unittest_common_public_config",
    "${window_base_path}/resources/config/build:coverage_flags",
    "${window_base_path}/resources/config/build:testcase_flags",
    "${window_base_path}/wmserver:libidl_config",
  ]

  deps = [
    "${window_base_path}/dm:libdm",
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/utils:libwmutil_base",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/intention_event/service:intention_event_anr_manager",
    "${window_base_path}/window_scene/screen_session_manager:screen_session_manager",
    "${window_base_path}/window_scene/screen_session_manager_client:screen_session_manager_client",
    "${window_base_path}/window_scene/session:scene_session",
    "${window_base_path}/window_scene/session:screen_session",
    "${window_base_path}/window_scene/session_manager:scene_session_manager",
    "${window_base_path}/window_scene/session_manager:session_manager",
    "${window_base_path}/window_scene/session_manager:session_manager_lite",
    "${window_base_path}/wm:libwm",
  ]

  public_deps = [
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/utils:libwmutil_base",
    "${window_base_path}/window_scene/session:screen_session",
    "../../../test/common/utils:libtestutil",
  ]

  external_deps = test_external_deps

  public_external_deps = [
    "ability_base:session_info",
    "ability_base:want",
  ]
  defines = []
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "SENSOR_ENABLE" ]
  }

  part_name = "window_manager"
  subsystem_name = "window"
}
## Build ws_unittest_common.a }}}
