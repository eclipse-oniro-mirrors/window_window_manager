# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../windowmanager_aafwk.gni")

config("intention_event_public_config") {
  include_dirs = [
    "anr_manager/include",
    "event_stage/include",
    "timer_manager/include",
    "../../../utils/include",
    "../../session/container/include/zidl",
    "../../interfaces/include",
    "../../../interfaces/innerkits/wm",
    "../../",
    "../dfx/include",
    "../framework/anr_handler/include",
    "../utils/include",
  ]
}

ohos_shared_library("intention_event_anr_manager") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  sources = [
    "../dfx/src/dfx_hisysevent.cpp",
    "../framework/anr_handler/src/anr_handler.cpp",
    "../utils/src/util.cpp",
    "anr_manager/src/anr_manager.cpp",
    "event_stage/src/event_stage.cpp",
    "timer_manager/src/timer_manager.cpp",
  ]

  public_configs = [ ":intention_event_public_config" ]
  public_external_deps = [ "accessibility:accessibility_common" ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_single",
  ]

  if (defined(global_parts_info) &&
      defined(global_parts_info.barrierfree_accessibility)) {
    external_deps += [ "accessibility:accessibility_common" ]
  }
  part_name = "window_manager"
  subsystem_name = "window"

  defines = []
  if (build_variant == "user") {
    defines += [ "IS_RELEASE_VERSION" ]
  }
}
