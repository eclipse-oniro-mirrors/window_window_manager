# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../../../windowmanager_aafwk.gni")

config("scene_session_manager_napi_config") {
  visibility = [ ":*" ]
  include_dirs = [ "${window_base_path}/wm/include" ]
}

ohos_shared_library("scenesessionmanager_napi") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  sources = [
    "js_root_scene_session.cpp",
    "js_rss_session.cpp",
    "js_scene_session.cpp",
    "js_scene_session_manager.cpp",
    "js_scene_utils.cpp",
    "js_window_scene_config.cpp",
    "scene_session_manager_module.cpp",
  ]

  configs = [ ":scene_session_manager_napi_config" ]

  deps = [
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/utils:libwmutil_base",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/session:scene_session",
    "${window_base_path}/window_scene/session_manager:scene_session_manager",
    "${window_base_path}/wm:libwm",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_start_setting",
    "ability_runtime:napi_common",
    "ability_runtime:process_options",
    "ability_runtime:runtime",
    "ace_engine:ace_uicontent",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image",
    "image_framework:image_native",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
  ]

  defines = []
  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_soc_perf)) {
    external_deps += [ "soc_perf:socperf_client" ]
    defines += [ "SOC_PERF_ENABLE" ]
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.powermgr_power_manager)) {
    external_deps += [ "power_manager:powermgr_client" ]
    defines += [ "POWER_MANAGER_ENABLE" ]
  }
  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_resource_schedule_service)) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "RESOURCE_SCHEDULE_SERVICE_ENABLE" ]
  }

  relative_install_dir = "module"
  part_name = "window_manager"
  subsystem_name = "window"

  if (build_variant == "user") {
    defines += [ "IS_RELEASE_VERSION" ]
  }
}
