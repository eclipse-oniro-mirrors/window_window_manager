# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../windowmanager_aafwk.gni")

config("session_manager_public_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/interfaces/include",
    "${window_base_path}/window_scene",
    "${window_base_path}/window_scene/common/include",
    "${window_base_path}/window_scene/interfaces/include",
    "${window_base_path}/window_scene/screen_session_manager/include",
    "${window_base_path}/window_scene/screen_session_manager/include/zidl",
    "${window_base_path}/window_scene/session_manager_service/include",

    # for session_manager
    "${window_base_path}/wmserver/include",
    "${window_base_path}/wmserver/include/zidl",

    # for screen_session_manager
    "${window_base_path}/utils/include",
    "${window_base_path}/dm/include",
    "${window_base_path}/interfaces/innerkits/dm",
    "${window_base_path}/dmserver/include",

    # for scene session manager
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/wmserver/include",
    "${window_base_path}/window_scene/screen_session_manager_client/include",

    # for window_manager_hilog
    "${window_base_path}/utils/include",

    "${window_base_path}/wm/include",
    "${window_base_path}/wm/include/zidl",
  ]
}

ohos_shared_library("screen_session_manager") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }
  sources = [
    "../../dm/src/zidl/display_manager_agent_proxy.cpp",
    "../screen_session_manager_client/src/zidl/screen_session_manager_client_proxy.cpp",
    "src/connection/screen_cast_connection.cpp",
    "src/connection/screen_session_ability_connection.cpp",
    "src/connection/screen_snapshot_picker_connection.cpp",
    "src/fold_screen_controller/dual_display_fold_policy.cpp",
    "src/fold_screen_controller/fold_screen_controller.cpp",
    "src/fold_screen_controller/fold_screen_policy.cpp",
    "src/fold_screen_controller/fold_screen_sensor_manager.cpp",
    "src/fold_screen_controller/fold_screen_state_machine.cpp",
    "src/fold_screen_controller/sensor_fold_state_manager/dual_display_sensor_fold_state_manager.cpp",
    "src/fold_screen_controller/sensor_fold_state_manager/sensor_fold_state_manager.cpp",
    "src/fold_screen_controller/sensor_fold_state_manager/single_display_sensor_fold_state_manager.cpp",
    "src/fold_screen_controller/sensor_fold_state_manager/single_display_sensor_pocket_fold_state_manager.cpp",
    "src/fold_screen_controller/single_display_fold_policy.cpp",
    "src/fold_screen_controller/single_display_pocket_fold_policy.cpp",
    "src/fold_screen_controller/super_fold_sensor_manager.cpp",
    "src/fold_screen_controller/super_fold_state_manager.cpp",
    "src/multi_screen_manager.cpp",
    "src/publish/screen_session_publish.cpp",
    "src/screen_cutout_controller.cpp",
    "src/screen_rotation_property.cpp",
    "src/screen_scene_config.cpp",
    "src/screen_sensor_connector.cpp",
    "src/screen_sensor_plugin.cpp",
    "src/screen_session_dumper.cpp",
    "src/screen_session_manager.cpp",
    "src/screen_setting_helper.cpp",
    "src/screen_tent_property.cpp",
    "src/session_display_power_controller.cpp",
    "src/setting_observer.cpp",
    "src/setting_provider.cpp",
    "src/zidl/screen_session_manager_stub.cpp",
  ]

  cflags_cc = [ "-std=c++17" ]

  public_configs = [ ":session_manager_public_config" ]
  public_external_deps = [
    "ability_runtime:session_handler",
    "accessibility:accessibility_common",
    "input:libmmi-client",
    "input:libmmi-napi",
  ]
  deps = [
    "${window_base_path}/etc:wms_etc",
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/utils:libwmutil_base",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/interfaces/innerkits:libwsutils",
    "${window_base_path}/window_scene/session:screen_session",
    "${window_base_path}/wmserver:sms",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbeget_proxy",
    "ipc:ipc_core",
    "libxml2:libxml2",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (window_manager_feature_subscribe_motion) {
    if (defined(global_parts_info) && defined(global_parts_info.msdp_motion)) {
      defines += [ "WM_SUBSCRIBE_MOTION_ENABLE" ]
    }
  }

  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "SENSOR_ENABLE" ]
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.powermgr_power_manager)) {
    external_deps += [ "power_manager:powermgr_client" ]
    defines += [ "POWER_MANAGER_ENABLE" ]
  }

  if (window_manager_feature_tp_enable) {
    defines += [ "TP_FEATURE_ENABLE" ]
  }

  if (is_standard_system) {
    external_deps += [ "init:libbegetutil" ]
  } else {
    external_deps += [ "init_lite:libbegetutil" ]
  }

  if (device_status_enable) {
    external_deps += [ "device_status:devicestatus_client" ]
    defines += [ "DEVICE_STATUS_ENABLE" ]
  }

  innerapi_tags = [ "platformsdk" ]
  part_name = "window_manager"
  subsystem_name = "window"
}
