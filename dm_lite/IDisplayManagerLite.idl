/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable OHOS.Rosen.DisplayInfo;
sequenceable OHOS.Rosen.CutoutInfo;
sequenceable OHOS.Rosen.ScreenInfo;
interface zidl..OHOS.Rosen.IDisplayManagerAgent;

interface OHOS.Rosen.IDisplayManagerLite {
    void RegisterDisplayManagerAgent([in] IDisplayManagerAgent displayManagerAgent, [in] unsigned int type,
        [out] int dmError);
    void UnregisterDisplayManagerAgent([in] IDisplayManagerAgent displayManagerAgent, [in] unsigned int type,
        [out] int dmError);
    void GetDefaultDisplayInfo([out] sptr<DisplayInfo> displayInfo);
    void GetDisplayInfoById([in] unsigned long displayId, [out] sptr<DisplayInfo> displayInfo);
    void GetCutoutInfo([in] unsigned long displayId, [out] sptr<CutoutInfo> cutoutInfo);
    void WakeUpBegin([in] unsigned int reason, [out] boolean isSucc);
    void WakeUpEnd([out] boolean isSucc);
    void SuspendBegin([in] unsigned int reason, [out] boolean isSucc);
    void SuspendEnd([out] boolean isSucc);
    void SetSpecifiedScreenPower([in] unsigned long screenId, [in] unsigned int screenPowerState,
        [in] unsigned int reason, [out] boolean isSucc);
    void SetScreenPowerForAll([in] unsigned int screenPowerState, [in] unsigned int reason, [out] boolean isSucc);
    void GetScreenPower([in] unsigned long dmsScreenId, [out] unsigned int screenPowerState);
    void GetScreenPower([out] unsigned int screenPowerState);
    void SetDisplayState([in] unsigned int displayState, [out] boolean isSucc);
    void GetDisplayState([in] unsigned long displayId, [out] unsigned int displayState);
    void TryToCancelScreenOff([out] boolean isSucc);
    void GetAllDisplayIds([out] unsigned long[] displayIds);
    void GetAllScreenInfos([out] sptr<ScreenInfo>[] screenInfos, [out] int dmError);
    void GetScreenInfoById([in] unsigned long screenId, [out] sptr<ScreenInfo> screenInfo);
    void SetScreenBrightness([in] unsigned long screenId, [in] unsigned int level, [out] boolean isSucc);
    void GetScreenBrightness([in] unsigned long screenId, [out] unsigned int level);
}
